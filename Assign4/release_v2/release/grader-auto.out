{'extraCredit': 0,
 'fatalError': False,
 'maxExtraCredit': 0,
 'maxTotalPoints': 12,
 'messages': [],
 'mode': 'auto',
 'parts': [{'description': 'Basic test for succAndProbReward() that covers '
                           'several edge cases.',
            'extraCredit': False,
            'maxPoints': 3,
            'maxSeconds': 5,
            'messages': [],
            'name': '1a-1-basic',
            'points': 3,
            'seconds': 0},
           {'description': 'Hidden test for ValueIteration. Run ValueIteration '
                           'on BlackjackMDP, then test if V[startState] is '
                           'correct.',
            'extraCredit': False,
            'maxPoints': 2,
            'maxSeconds': 5,
            'messages': [],
            'name': '1a-2-hidden',
            'points': 0,
            'seconds': 0},
           {'description': 'Hidden test for ValueIterationDP. Run '
                           'ValueIterationDP on BlackjackMDP, then test if '
                           'V[startState] is correct and ValueIterationDP is '
                           'faster than ValueIteration.',
            'extraCredit': False,
            'maxPoints': 3,
            'maxSeconds': 5,
            'messages': ["Exception thrown: <class 'KeyError'> -- (47, None, "
                         'None)',
                         '  File "grader.py", line 106, in test_1b\n'
                         '    pred_dp = solve(submission.ValueIterationDP)\n',
                         '  File "grader.py", line 94, in solve\n'
                         '    alg.solve(mdp, *args)\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\submission.py", '
                         'line 130, in solve\n'
                         '    newV[state] = max(self.computeQ(mdp, V, state, '
                         'action) for action in mdp.actions(state))\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\submission.py", '
                         'line 130, in <genexpr>\n'
                         '    newV[state] = max(self.computeQ(mdp, V, state, '
                         'action) for action in mdp.actions(state))\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\util.py", '
                         'line 26, in computeQ\n'
                         '    return sum(prob * (reward + mdp.discount() * '
                         'V[newState]) \\\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\util.py", '
                         'line 26, in <genexpr>\n'
                         '    return sum(prob * (reward + mdp.discount() * '
                         'V[newState]) \\\n'],
            'name': '1b-1-hidden',
            'points': 0,
            'seconds': 0},
           {'description': 'Hidden test for ValueIterationDP. Run '
                           'ValueIterationDP on BlackjackMDP, then test if '
                           'V[startState] is correct and ValueIterationDP is '
                           'faster than ValueIteration.',
            'extraCredit': False,
            'maxPoints': 2,
            'maxSeconds': 5,
            'messages': ["Exception thrown: <class 'KeyError'> -- (47, None, "
                         'None)',
                         '  File "grader.py", line 106, in test_1b\n'
                         '    pred_dp = solve(submission.ValueIterationDP)\n',
                         '  File "grader.py", line 94, in solve\n'
                         '    alg.solve(mdp, *args)\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\submission.py", '
                         'line 130, in solve\n'
                         '    newV[state] = max(self.computeQ(mdp, V, state, '
                         'action) for action in mdp.actions(state))\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\submission.py", '
                         'line 130, in <genexpr>\n'
                         '    newV[state] = max(self.computeQ(mdp, V, state, '
                         'action) for action in mdp.actions(state))\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\util.py", '
                         'line 26, in computeQ\n'
                         '    return sum(prob * (reward + mdp.discount() * '
                         'V[newState]) \\\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\util.py", '
                         'line 26, in <genexpr>\n'
                         '    return sum(prob * (reward + mdp.discount() * '
                         'V[newState]) \\\n'],
            'name': '1b-2-hidden',
            'points': 0,
            'seconds': 0},
           {'description': 'Basic test for incorporateFeedback() using '
                           'NumberLineMDP.',
            'extraCredit': False,
            'maxPoints': 3,
            'maxSeconds': 3,
            'messages': [],
            'name': '2a-1-basic',
            'points': 3,
            'seconds': 0},
           {'description': 'Hidden test for incorporateFeedback(). Run '
                           'Qlearning on a small MDP, then ensure that getQ '
                           'returns reasonable policy.',
            'extraCredit': False,
            'maxPoints': 2,
            'maxSeconds': 3,
            'messages': [],
            'name': '2a-2-hidden',
            'points': 0,
            'seconds': 0},
           {'description': 'Basic test for incorporateFeedback() using '
                           'NumberLineMDP.',
            'extraCredit': False,
            'maxPoints': 3,
            'maxSeconds': 3,
            'messages': ["Exception thrown: <class 'TypeError'> -- can't "
                         "multiply sequence by non-int of type 'float'",
                         '  File "grader.py", line 183, in test_2b_1\n'
                         '    rl.incorporateFeedback([0, 1, 0, 1, 1, None, '
                         'None], mdp.isEnd)\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\submission.py", '
                         'line 231, in incorporateFeedback\n'
                         '    updating = self.getStepSize() * ((reward + '
                         'self.discount * Q_next) - Q_now) # sarsa just update '
                         'the evaluation of current policy pi\n'],
            'name': '2b-1-basic',
            'points': 0,
            'seconds': 0},
           {'description': 'Hidden test for incorporateFeedback(). Run SARSA '
                           'on a small MDP, then ensure that getQ returns '
                           'reasonable policy.',
            'extraCredit': False,
            'maxPoints': 2,
            'maxSeconds': 3,
            'messages': ["Exception thrown: <class 'TypeError'> -- unsupported "
                         "operand type(s) for +: 'int' and 'list'",
                         '  File "grader.py", line 217, in test_2b_2\n'
                         '    pred = get_policy(submission.SARSA)\n',
                         '  File "grader.py", line 212, in get_policy\n'
                         '    util.simulate(mdp, rl, numTrials=30000)\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\util.py", '
                         'line 189, in simulate\n'
                         '    rl.incorporateFeedback(episode, isLast)\n',
                         '  File "C:\\Users\\82106\\OneDrive - '
                         'postech.ac.kr\\포스텍 2학년 '
                         '2학기\\AI\\Assign\\Assign4\\release_v2\\release\\submission.py", '
                         'line 231, in incorporateFeedback\n'
                         '    updating = self.getStepSize() * ((reward + '
                         'self.discount * Q_next) - Q_now) # sarsa just update '
                         'the evaluation of current policy pi\n'],
            'name': '2b-2-hidden',
            'points': 0,
            'seconds': 0},
           {'description': 'Basic test for blackjackFeatureExtractor.  Runs '
                           'Qlearning using blackjackFeatureExtractor, then '
                           'checks to see that Q-values are correct.',
            'extraCredit': False,
            'maxPoints': 3,
            'maxSeconds': 3,
            'messages': [],
            'name': '2c-1-basic',
            'points': 3,
            'seconds': 0},
           {'description': 'Hidden test for incorporateFeedback(). Run '
                           'Qlearning on a large MDP, then ensure that getQ '
                           'returns reasonable policy.',
            'extraCredit': False,
            'maxPoints': 2,
            'maxSeconds': 20,
            'messages': [],
            'name': '2c-2-hidden',
            'points': 2,
            'seconds': 2}],
 'totalPoints': 9}
